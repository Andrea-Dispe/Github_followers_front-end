{"version":3,"sources":["components/Navbar.jsx","App.js","utilities/paginate.js","reportWebVitals.js","index.js"],"names":["Navbar","id","alt","App","Header","Layout","Footer","Content","useState","followers","setFollowers","currentPage","columns","items","pageNumber","pageSize","startIndex","_","slice","take","value","paginate","title","dataIndex","key","render","src","href","useEffect","axios","get","then","res","console","log","data","sort","a","b","login","toUpperCase","catch","err","dataSource","pagination","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8OAaeA,G,OAXA,WACb,OACE,mCACE,gCACE,qBAAKC,GAAG,OAAR,SAAe,qBAAKC,IAAI,yBACxB,gC,8BCqEOC,MAhEf,WACE,IACQC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAFX,EAGqBC,mBAAS,IAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIyBF,mBAAS,GAJlC,mBAING,EAJM,KAQPC,GARO,KCXR,SAAkBC,EAAOC,EAAYC,GAC1C,IAAMC,GAAcF,EAAa,GAAKC,EAC/BE,IAAEJ,GAAOK,MAAMF,GAAYG,KAAKJ,GAAUK,QDgBnCC,CAASZ,EAAWE,EADjB,GAED,CACd,CACEW,MAAO,SACPC,UAAW,aACXC,IAAK,aACLC,OAAQ,SAAAF,GAAS,OAAI,qBAAKG,IAAKH,EAAWrB,IAAI,QAEhD,CACEoB,MAAO,WACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,aACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAAAF,GAAS,OAAI,mBAAGI,KAAMJ,EAAT,uBAmBzB,OAfAK,qBAAU,WACRC,IACGC,IA7BW,wDA8BXC,MAAK,SAACC,GACLC,QAAQC,IAAI,SAAUF,EAAIG,MAC1BzB,EAAasB,EAAIG,KAAKC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAMC,cAAgBF,EAAEC,MAAMC,cAAgB,GAAK,SAE5FC,OAAM,SAACC,GAAD,OAAST,QAAQC,IAAIQ,QAC7B,IAQD,mCACE,eAAC,IAAD,WACE,cAACtC,EAAD,UACE,cAAC,EAAD,MAEF,eAACG,EAAD,WACA,cAAC,IAAD,CAAOoC,WAAYlC,EAAWmC,WAAY,CAAE7B,SA5CjC,GA4C6CH,QAASA,IADjE,OASA,cAACN,EAAD,UE1DOuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAS5B,OACP,cAAC,IAAM6B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.408b932b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <>\n      <nav>\n        <div id=\"logo\"><img alt=\"Founders lair logo\"/></div>\n        <form></form>\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Layout } from \"antd\";\n\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Pagination from \"./components/Pagination\";\nimport { paginate } from \"./utilities/paginate\";\n\nimport { Table} from 'antd';\n\n\nfunction App() {\n  const api_url = \"https://api.github.com/users/mosh-hamedani/followers\";\n  const { Header, Footer, Content } = Layout;\n  const [followers, setFollowers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const pageSize = 6;\n  const users = paginate(followers, currentPage, pageSize);\n  const columns = [\n    {\n      title: 'Avatar',\n      dataIndex: 'avatar_url',\n      key: 'avatar_url',\n      render: dataIndex => <img src={dataIndex} alt='s'/>\n    },\n    {\n      title: 'Username',\n      dataIndex: 'login',\n      key: 'login',\n    },\n    {\n      title: 'Repository',\n      dataIndex: 'html_url',\n      key: 'html_url',\n      render: dataIndex => <a href={dataIndex}>Visit</a>,\n    },\n  ];\n\n  useEffect(() => {\n    axios\n      .get(api_url)\n      .then((res) => {\n        console.log(\"sorted\", res.data);\n        setFollowers(res.data.sort((a, b) => (a.login.toUpperCase() > b.login.toUpperCase() ? 1 : -1)));\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  function handlePageChange(page) {\n    setCurrentPage(page);\n  }\n\n\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Navbar />\n        </Header>\n        <Content>\n        <Table dataSource={followers} pagination={{ pageSize }} columns={columns} />;\n          {/* <Pagination\n            itemsCount={followers.length}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChange={handlePageChange}\n          /> */}\n        </Content>\n        <Footer></Footer>\n      </Layout>\n    </>\n  );\n}\n\nexport default App;\n\n\n// backup table\n\n// <Layout>\n// <Header>\n//   <Navbar />\n// </Header>\n// <Content>\n//   <table>\n//     <thead className=\"columns\">\n//       <tr>\n//         <th>Avatar</th>\n//         <th>Username</th>\n//         <th>Repository</th>\n//       </tr>\n//     </thead>\n//     <tbody>\n//       {users.map((follower) => (\n//         <tr key={follower.id}>\n//           <td>\n//             <img\n//               className=\"avatar\"\n//               src={follower.avatar_url}\n//               alt={follower.login}\n//             />\n//           </td>\n//           <td>{follower.login}</td>\n//           <td>\n//             <a href={follower.html_url}>Visit</a>\n//           </td>\n//         </tr>\n//       ))}\n//     </tbody>\n//   </table>\n\n//   <Pagination\n//     itemsCount={followers.length}\n//     pageSize={pageSize}\n//     currentPage={currentPage}\n//     onPageChange={handlePageChange}\n//   />\n// </Content>\n// <Footer></Footer>\n// </Layout>\n","import _ from \"lodash\";\nexport function paginate(items, pageNumber, pageSize) {\n  const startIndex = (pageNumber - 1) * pageSize;\n  return _(items).slice(startIndex).take(pageSize).value();\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}